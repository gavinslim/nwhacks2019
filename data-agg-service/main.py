from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from datetime import datetime
import json

# Setting the Server and DB
app = Flask('main')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)
CORS(app)


# DOA for each viewing
class View(db.Model):
    id = db.Column(db.Integer, primary_key=True, nullable=False)
    age = db.Column(db.Integer, nullable=False)
    gender = db.Column(db.String, nullable=False)
    reaction = db.Column(db.String, nullable=False)
    timestamp = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    hair_color = db.Column(db.String, nullable=False)
    bald = db.Column(db.Boolean, nullable=False)
    moustache = db.Column(db.Boolean, nullable=False)
    beard = db.Column(db.Boolean, nullable=False)
    glasses = db.Column(db.Boolean, nullable=False)
    eye_makeup = db.Column(db.Boolean, nullable=False)
    lip_makeup = db.Column(db.Boolean, nullable=False)
    forehead_occluded = db.Column(db.Boolean, nullable=False)
    eye_occluded = db.Column(db.Boolean, nullable=False)
    mouth_occluded = db.Column(db.Boolean, nullable=False)

    def __repr__(self):
        return '<View %r>' % self.id

    def to_dict(self):
        serialized = {
            "timestamp": self.timestamp,
            "age": self.age,
            "gender": self.gender,
            "reaction": self.reaction,
            "hair": {
                "color": self.hair_color,
                "bald": self.bald
            },
            "facial_hair": {
                "moustache": self.moustache,
                "beard": self.beard
            },
            "accessories": {
                "glasses": self.glasses,
            },
            "makeup": {
                "eyeMakeup": self.eye_makeup,
                "lipMakeup": self.lip_makeup
            },
            "occlusion": {
                "foreheadOccluded": self.forehead_occluded,
                "eyeOccluded": self.eye_occluded,
                "mouthOccluded": self.eye_occluded
            }
        }
        return serialized


@app.route('/', methods=['POST'])
def save():
    data = request.json
    view = View(
        # ID is autogenerated I assume, don't assign a value
        age=data['age'],
        gender=data['gender'],
        reaction=_calc_reaction_change(data['start_reaction'], data['end_reaction']),
        hair_color=data['face_attributes']['hair']['color'],
        bald=data['face_attributes']['hair']['bald'],
        moustache=data['face_attributes']['facial_hair']['moustache'],
        beard=data['face_attributes']['facial_hair']['beard'],
        glasses=data['accessories']['glasses'],
        eye_makeup=data['accessories']['makeup']['eyeMakeup'],
        lip_makeup=data['accessories']['makeup']['lipMakeup'],
        forehead_occluded=data['occlusion']['foreheadOccluded'],
        eye_occluded=data['occlusion']['eyeOccluded'],
        mouth_occluded=data['occlusion']['mouthOccluded']
    )
    db.session.add(view)
    db.session.commit()
    return "Success"


@app.route('/', methods=['GET'])
def get():
    time_from = request.args.get('from', type=str)
    time_to = request.args.get('to', type=str)
    if time_from is not None:
        time_from = datetime.strptime(time_from, '%Y-%m-%d %H:%M:%S.%f')
    if time_to is not None:
        time_to = datetime.strptime(time_to, '%Y-%m-%d %H:%M:%S.%f')
    age_from = request.args.get('age_from', type=int)
    age_to = request.args.get('age_to', type=int)
    genders = request.args.get('genders', type=str)
    if genders is not None:
        genders = json.loads(genders)
    reactions = request.args.get('reactions', type=str)
    if reactions is not None:
        reactions = json.loads(reactions)
    moustache = request.args.get('moustache', type=str)
    if moustache is not None:
        moustache = json.loads(moustache)
    beard = request.args.get('beard', type=str)
    if beard is not None:
        beard = json.loads(beard)
    hair_colors = request.args.get('hair_colors')
    if hair_colors is not None:
        hair_colors = json.loads(hair_colors)
    bald = request.args.get('bald', type=str)
    if bald is not None:
        bald = json.loads(bald)
    glasses = request.args.get('glasses', type=str)
    if glasses is not None:
        glasses = json.loads(glasses)
    eye_makeup = request.args.get('eye_makeup', type=str)
    if eye_makeup is not None:
        eye_makeup = json.loads(eye_makeup)
    lip_makeup = request.args.get('lip_makeup', type=str)
    if lip_makeup is not None:
        lip_makeup = json.loads(lip_makeup)
    forehead_occlusion = request.args.get('forehead_occlusion', type=str)
    if forehead_occlusion is not None:
        forehead_occlusion = json.loads(forehead_occlusion)
    eye_occlusion = request.args.get('eye_occlusion', type=str)
    if eye_occlusion is not None:
        eye_occlusion = json.loads(eye_occlusion)
    mouth_occlusion = request.args.get('mouth_occlusion', type=str)
    if mouth_occlusion is not None:
        mouth_occlusion = not json.loads(mouth_occlusion)

    results = _read(time_from, time_to, age_from, age_to, genders, reactions, moustache, beard,
                    hair_colors, bald, glasses, eye_makeup, lip_makeup, forehead_occlusion,
                    eye_occlusion, mouth_occlusion)

    # Converting Results to JSON Serializable values as Dicts in a list
    views = []
    for res in results:
        views.append(res.to_dict())
    return jsonify(views)


# Helper Methods for serving the endpoints
def _read(time_from=None, time_to=None, age_from=None, age_to=None, genders=None, reactions=None, moustache=None,
          beard=None, hair_colors=None, bald=None, glasses=None, eye_makeup=None, lip_makeup=None,
          forehead_occlusion=None, eye_occlusion=None, mouth_occlusion=None):
    # Applying Filters on Query
    query = View.query.filter()
    if time_from is not None and time_to is not None:
        query = query.filter(View.timestamp.between(time_from, time_to))
    if age_from is not None and age_to is not None:
        query = query.filter(View.age.between(age_from, age_to))
    if genders is not None:
        query = query.filter(View.gender.in_(tuple(genders)))
    if reactions is not None:
        query = query.filter(View.reaction.in_(tuple(reactions)))
    if moustache is not None:
        query = query.filter_by(moustache=moustache)
    if beard is not None:
        query = query.filter_by(beard=beard)
    if hair_colors is not None:
        query = query.filter(View.hair_color.in_(tuple(hair_colors)))
    if bald is not None:
        query = query.filter_by(bald=bald)
    if glasses is not None:
        query = query.filter_by(glasses=glasses)
    if eye_makeup is not None:
        query = query.filter_by(eye_makeup=eye_makeup)
    if lip_makeup is not None:
        query = query.filter_by(lip_makeup=lip_makeup)
    if forehead_occlusion is not None:
        query = query.filter_by(forehead_occluded=forehead_occlusion)
    if eye_occlusion is not None:
        query = query.filter_by(eye_occluded=eye_occlusion)
    if mouth_occlusion is not None:
        query = query.filter_by(mouth_occluded=mouth_occlusion)

    return query.all()


def _calc_reaction_change(start_reaction, end_reaction):
    positive_reactions = ['happiness', 'surprise']
    negative_reactions = ['anger', 'contempt', 'disgust', 'fear', 'sadness']
    if start_reaction == end_reaction:
        return 'neutral'

    if start_reaction == 'neutral':
        return 'positive' if end_reaction in positive_reactions else 'negative'

    if start_reaction in negative_reactions:
        return 'positive' if end_reaction in positive_reactions else 'negative'

    if start_reaction in positive_reactions:
        return 'positive' if end_reaction in positive_reactions else 'negative'


# Running the WebServer
Flask.run(app, host="localhost", port=8085)
